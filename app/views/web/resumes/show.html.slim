= content_for :meta do
  = structured_data_tag 'resume',
    resume: @resume, educations: @resume_educations, works: @resume_works

= content_for :header do
  = @resume

/ .d-flex.mb-3.text-muted
/   .d-flex.me-4
/     .me-2= t('.published')
/     .fw-light
/       = distance_of_time_in_words_to_now @resume.created_at
/   .d-flex.me-4
/     .me-2= t('.views')
/     .fw-light= 3
/   .d-flex.me-4
/     .me-2= t('.answers')
/     .fw-light= 3
/   .d-flex.me-4
/     .me-2= t('.likes')
/     .fw-light= 3
- if @resume.archived?
  .alert.alert-warning = t('.archived')

- if policy(@resume).download?
  .mb-2.d-flex.justify-content-end
    = link_to resume_pdf_path(@resume, 'base', format: :pdf),
              class: 'me-3', title: t('.print'), target: :_blank, rel: 'noopener' do
      i.bi.bi-printer-fill
    = link_to resume_pdf_path(@resume, 'base'), title: t('.download') do
      i.bi.bi-download

.mb-5
  = render 'information'

  .mt-5.pt-5
    h3.mb-3 = t('.comments')
    - if @resume.comments.web.any?
      - @resume.comments.web.each_with_index do |comment, i|
        - if i != 0
          hr.mb-4
        .d-flex(id="comment-#{comment.id}")
          .me-auto
            span.me-1.hexlet-cv-content.hexlet-cv-inline-paragraph
              == markdown2html comment.content
            span.small
              - if comment.user
                span.me-1
                  = link_to comment.user, user_path(comment.user)
              = link_to l(comment.created_at, format: :long_schema), url_for(anchor: "comment-#{comment.id}"), class: 'text-muted'
          - if comment.user == current_user
            .d-flex
              .me-2
                = link_to edit_resume_comment_path(@resume, comment)
                  span.bi.bi-pen-fill.text-secondary

              div
                = link_to resume_comment_path(@resume, comment), method: :delete, data: { confirm: t('confirm') } do
                  span.bi.bi-x-lg.text-secondary
      hr.my-2
      a.d-block.text-muted(href="#new_resume_comment-#{@resume.id}" data-bs-toggle="collapse")
        = t('.add_a_comment')
      .collapse(id="new_resume_comment-#{@resume.id}")
        - if user_signed_in?
          = render 'web/shared/comment_form', comment: @resume.comments.build, url: resume_comments_path(@resume)
        - else
          = render 'comment_requires'

- if @resume_answers.any?
  h3.mb-3 = t('.recomendations')

  - @resume_answers.each do |answer|
    = render partial: 'web/shared/answer', object: answer, locals: { current_user_likes_by_answer_id: @current_user_likes_by_answer_id }

- if user_signed_in?
  - if @current_user_answer
    .text-center.lead = t('.answer_exists')
  - else
    = render partial: 'web/shared/answer_form', locals: { answer: @answer, url: resume_answers_path(@resume) }
- else
  = render 'answer_requires'
