- title seo_for_paging(@page, t('.title'))
- description seo_for_paging(@page, t('.description'))

- content_for :header do
  = t('.header')

= render partial: 'web/shared/resume_filter', locals: { query: @q, tags: @tags }

.p-3.nav.nav-pills.mb-3.justify-content-center
  = filter_link(t('.all'), {}, class: 'nav-item nav-link')
  = filter_link(t('.popular'), { created_at_gteq: Date.current - 1.week, popular_gteq: Date.current - 1.week, s: 'impressions_count desc' }, class: 'nav-item nav-link')
  = filter_link(t('.newest'), { created_at_gteq: Date.current - 1.day, s: 'created_at desc' }, class: 'nav-item nav-link')
  = filter_link(t('.without_answers'), { answers_count_eq: 0 }, class: 'nav-item nav-link')

.mb-5
  - @resumes.each_with_index do |resume, i|
    - if i != 0
      hr
    .card.border-0
      .card-body
        .row
          .col-4.col-sm-3.col-lg-2.text-center
            .text-muted.mb-3
              .h2.mb-0.fw-lighter = resume.answers.count
              .small = t('.answers', count: resume.answers.count)
            .text-muted.mb-3
              .h2.mb-0.fw-lighter = resume.impressions_count
              .small = t('.views', count: resume.impressions_count)
            / .text-muted.text-center
            /   .h2.mb-0.fw-lighter= 12
            /   .small= t('.likes')
          .col.d-flex.flex-column
            h5.card-title.text-break = link_to resume, resume_path(resume)
            .card-text.text-break.mb-2 = truncate_markdown(resume.summary, length: 200)
            .text-end.small.mt-auto
              .d-flex.fw-bold.flex-wrap
                - resume.skill_list.each do |skill|
                  .m-1
                    = filter_link(skill, { skills_name_in: skill }, class: 'nav-item nav-link')
              span.me-3.text-muted
                = distance_of_time_in_words_to_now resume.created_at
              = link_to resume.user, user_path(resume.user)
  = paginate @resumes
