.card.mb-5(id="answer-#{answer.id}")
  .card-header.d-flex.py-3.bg-white
    .me-auto.d-flex
      span.fw-bold = link_to answer.user, user_path(answer.user)
      span.mx-2.fw-light
        = link_to distance_of_time_in_words_to_now(answer.created_at), url_for(anchor: "answer-#{answer.id}"), class: 'text-muted'

      - if current_user == answer.user
        .d-flex.me-3
          .me-2
            = link_to edit_resume_answer_path(answer.resume, answer) do
              span.bi.bi-pen-fill.text-secondary
          div
            = link_to resume_answer_path(answer.resume, answer), method: :delete, data: { confirm: t('confirm') } do
              span.bi.bi-x-lg.text-secondary

    div
      - if answer.pending? && current_user == answer.resume.user
        // FIXME: Data params does not work
        = link_to t('.apply'), change_applying_state_resume_answer_path(answer.resume, answer),
          data: { confirm: t('confirm'), params: { event: :apply }.to_param },
          method: :patch,
          class: 'badge bg-success p-1',
          title: t('.title_apply')
      - elsif answer.applied?
          span.text-success = answer.aasm(:applying).human_state
      - elsif answer.pending?
          span.text-info = answer.aasm(:applying).human_state

  .card-body.d-flex
    .me-3.h4
      - let current_user_likes_by_answer_id.fetch(answer.id, nil) do |like|
        .text-center.text-muted.mb-2.mt-1.fw-light
          = answer.likes.count
        - if like
          = link_to answer_like_path(answer, like), method: 'delete', class: 'text-decoration-none' do
            span.bi.bi-hand-thumbs-up.text-secondary
        - else
          = link_to answer_likes_path(answer), method: 'post', class: 'text-decoration-none' do
            span.bi.bi-hand-thumbs-up.text-secondary
    .w-100
      .hexlet-cv-content.mb-3
        == markdown2html answer.content
      - if answer.comments.web.any?
        - answer.comments.web.each do |comment|
          hr.mb-4
          .d-flex(id="answer_comment-#{comment.id}")
            .me-auto
              span.me-2.hexlet-cv-content.hexlet-cv-inline-paragraph
                == markdown2html comment.content
              span.small
                - if comment.user
                  span.me-1
                    = link_to comment.user, user_path(comment.user)
                = link_to l(comment.created_at, format: :long_schema), url_for(anchor: "answer_comment-#{comment.id}"), class: 'text-muted'
            - if comment.user == current_user
              .d-flex
                .me-2
                  = link_to edit_answer_comment_path(answer, comment)
                    span.bi.bi-pen-fill.text-secondary
                div
                  = link_to answer_comment_path(answer, comment), method: :delete, data: { confirm: t('confirm') } do
                    span.bi.bi-x-lg.text-secondary
      hr.mb-4
      a.d-block.text-muted(href="#new_answer_comment-#{answer.id}" data-bs-toggle='collapse')
        = t('.add_a_comment')
      .collapse(id="new_answer_comment-#{answer.id}")
        - if user_signed_in?
          = render 'web/shared/comment_form', comment: answer.comments.build, url: answer_comments_path(answer)
        - else
          = render 'comment_requires'
