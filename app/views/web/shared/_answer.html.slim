- if answer.publishing_state == 'archived'
  = render 'web/shared/archived_answer', answer:, current_user_likes_by_answer_id:
- else
  .card.mb-5(id="answer-#{answer.id}")
    .card-header.d-flex.py-3.bg-white
      .me-auto.d-flex
        span.fw-bold = link_to answer.user, user_path(answer.user)
        span.mx-2.fw-light
          = link_to distance_of_time_in_words_to_now(answer.created_at), url_for(anchor: "answer-#{answer.id}"), class: 'text-muted'

        - if current_user == answer.user
          .d-flex.me-3
            .me-2
              = link_to edit_resume_answer_path(answer.resume, answer) do
                span.bi.bi-pen-fill.text-secondary
            div
              = link_to resume_answer_path(answer.resume, answer), method: :delete, data: { confirm: t('confirm') } do
                span.bi.bi-x-lg.text-secondary

      div
        - if answer.pending? && current_user == answer.resume.user
          // FIXME: Data params does not work
          = link_to t('.apply'), change_applying_state_resume_answer_path(answer.resume, answer),
            data: { confirm: t('confirm'), params: { event: :apply }.to_param },
            method: :patch,
            class: 'badge bg-success p-1',
            title: t('.apply')
        - elsif answer.applied?
            span.text-success = answer.aasm(:applying).human_state
        - elsif answer.pending?
            span.text-info = answer.aasm(:applying).human_state

    .card-body.d-flex
      .me-3.h4
        - let current_user_likes_by_answer_id.fetch(answer.id, nil) do |like|
          .text-center.text-muted.mb-2.mt-1.fw-light
            = answer.likes.count
          - if like
            = link_to answer_like_path(answer, like), method: 'delete', class: 'text-decoration-none' do
              span.bi.bi-hand-thumbs-up.text-secondary
          - else
            = link_to answer_likes_path(answer), method: 'post', class: 'text-decoration-none' do
              span.bi.bi-hand-thumbs-up.text-secondary
      .w-100
        .hexlet-cv-content.mb-3
          - if answer.user.email == ENV.fetch('EMAIL_SPECIAL_USER')
            == markdown2html(answer.content, details: true)
          - else
            == markdown2html answer.content
        - if answer.comments.web.any?
          - answer.comments.web.each do |comment|
            - if comment.archived?
              = render 'web/shared/archived_comment', comment:
            -else
              = render 'web/shared/resume_answer_comment', comment:, answer:
        hr.mb-4
        a.d-block.text-muted(href="#new_answer_comment-#{answer.id}" data-bs-toggle='collapse')
          = t('.add_a_comment')
        .collapse(id="new_answer_comment-#{answer.id}")
          - if user_signed_in?
            = render 'web/shared/comment_form', comment: answer.comments.build, url: answer_comments_path(answer)
          - else
            = render 'comment_requires'
