= link_to url_for(params.permit!.merge(format: 'csv')) do
    span.bi.bi-file-earmark-spreadsheet
      = t('.export')

= render 'search_form', q: @search

table.table
  thead
    tr
      th = sort_link(@search, 'id')
      th = sort_link(@search, 'name')
      th = sort_link(@search, 'state')
      th = sort_link(@search, 'user')
      th = sort_link(@search, 'email')
      th = sort_link(@search, 'created_at')
      th = t('actions')
  tbody
    - @resumes.each do |resume|
      tr
        td = link_to resume.id, edit_admin_resume_path(resume)
        td
          / TODO: сделать возможным просматривать админам архивные и неопубликованные резюме
          - if resume.published?
            = link_to resume, resume_path(resume)
          - else
            = resume
        td = resume.aasm(:state).human_state
        td = link_to resume.user, user_path(resume.user)
        td = resume.user.email
        td = l resume.created_at, format: :short
        td
          .btn-group[role='group' aria-label="#{t('action_buttons')}"]
            - if resume.published?
              = link_to resume_path(resume), class: 'btn btn-outline-primary btn-sm' do
                span.bi.bi-eye-fill
            = link_to edit_admin_resume_path(resume), class: 'btn btn-outline-primary btn-sm', title: t('.edit') do
              span.bi.bi-gear-fill
            - if resume.may_restore?
              = link_to restore_admin_resume_path(resume, page: params[:page]), method: :patch, class: 'btn btn-outline-success btn-sm', data: { confirm: t('.confirm_restore') }, title: t('.restore') do
                span.bi.bi-arrow-counterclockwise
            - elsif resume.may_archive?
              = link_to archive_admin_resume_path(resume, page: params[:page]), method: :patch, class: 'btn btn-outline-danger btn-sm', data: { confirm: t('.confirm_archive') }, title: t('.archive') do
                span.bi.bi-trash3

= paginate @resumes
